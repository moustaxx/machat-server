# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type ConversationConnection {
  """A list of edges."""
  edges: [ConversationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Float!
}

type ConversationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ConversationType!
}

input ConversationListRelationFilter {
  every: ConversationWhereInput
  none: ConversationWhereInput
  some: ConversationWhereInput
}

input ConversationOrderByRelationAggregateInput {
  _count: SortOrder
}

input ConversationOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  lastRead: LastReadOrderByRelationAggregateInput
  messages: MessageOrderByRelationAggregateInput
  name: SortOrder
  participants: PersonOrderByRelationAggregateInput
}

input ConversationRelationFilter {
  is: ConversationWhereInput
  isNot: ConversationWhereInput
}

type ConversationType implements Node {
  createdAt: DateTime!

  """The global ID of the object."""
  id: ID!
  lastRead(cursor: LastReadWhereUniqueInput, distinct: [LastReadScalarFieldEnum!], orderBy: [LastReadOrderByWithRelationInput!], skip: Int, take: Int, where: LastReadWhereInput): [LastReadType!]!
  messages(after: String, before: String, first: Int, last: Int): MessageConnection!
  name: String!
  participants(after: String, before: String, first: Int, last: Int): PersonConnection!
}

input ConversationWhereInput {
  AND: [ConversationWhereInput!]
  NOT: [ConversationWhereInput!]
  OR: [ConversationWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  lastRead: LastReadListRelationFilter
  messages: MessageListRelationFilter
  name: StringFilter
  participants: PersonListRelationFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input LastReadListRelationFilter {
  every: LastReadWhereInput
  none: LastReadWhereInput
  some: LastReadWhereInput
}

input LastReadOrderByRelationAggregateInput {
  _count: SortOrder
}

input LastReadOrderByWithRelationInput {
  conversation: ConversationOrderByWithRelationInput
  conversationID: SortOrder
  lastRead: SortOrder
  person: PersonOrderByWithRelationInput
  personID: SortOrder
}

input LastReadPersonIDConversationIDCompoundUniqueInput {
  conversationID: Int!
  personID: Int!
}

enum LastReadScalarFieldEnum {
  conversationID
  lastRead
  personID
}

type LastReadType {
  conversation: ConversationType!
  conversationID: Int!
  lastRead: DateTime!
  person: PersonType!
  personID: Int!
}

input LastReadWhereInput {
  AND: [LastReadWhereInput!]
  NOT: [LastReadWhereInput!]
  OR: [LastReadWhereInput!]
  conversation: ConversationRelationFilter
  conversationID: IntFilter
  lastRead: DateTimeFilter
  person: PersonRelationFilter
  personID: IntFilter
}

input LastReadWhereUniqueInput {
  personID_conversationID: LastReadPersonIDConversationIDCompoundUniqueInput
}

type MessageConnection {
  """A list of edges."""
  edges: [MessageEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Float!
}

type MessageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: MessageType!
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageOrderByWithRelationInput {
  author: PersonOrderByWithRelationInput
  authorID: SortOrder
  content: SortOrder
  conversation: ConversationOrderByWithRelationInput
  conversationID: SortOrder
  createdAt: SortOrder
  id: SortOrder
}

enum MessageScalarFieldEnum {
  authorID
  content
  conversationID
  createdAt
  id
}

type MessageType implements Node {
  author: PersonType!
  authorID: Int!
  content: String!
  conversation: ConversationType!
  conversationID: Int!
  createdAt: DateTime!

  """The global ID of the object."""
  id: ID!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  author: PersonRelationFilter
  authorID: IntFilter
  content: StringFilter
  conversation: ConversationRelationFilter
  conversationID: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
}

input MessageWhereUniqueInput {
  id: Int
}

type Mutation {
  addPersonToConversation(conversationId: Int!, personId: Int!): ConversationType!
  createConversation(name: String!, participantIDs: [Int!]!): ConversationType!
  createMessage(content: String!, conversationId: Int!): MessageType!
  login(password: String!, username: String!): PersonType!
  logout: PersonType!
  markConvAsRead(conversationId: Int!): LastReadType!
  register(email: String!, password: String!, username: String!): PersonType!
  removePersonFromConversation(conversationId: Int!, personId: Int!): ConversationType!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

"""An object with a global ID."""
interface Node {
  """The global ID of the object."""
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PersonConnection {
  """A list of edges."""
  edges: [PersonEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Float!
}

type PersonEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PersonType!
}

input PersonListRelationFilter {
  every: PersonWhereInput
  none: PersonWhereInput
  some: PersonWhereInput
}

input PersonOrderByRelationAggregateInput {
  _count: SortOrder
}

input PersonOrderByWithRelationInput {
  conversations: ConversationOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  hash: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  lastRead: LastReadOrderByRelationAggregateInput
  lastSeen: SortOrder
  messages: MessageOrderByRelationAggregateInput
  username: SortOrder
}

input PersonRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

type PersonType implements Node {
  conversations(after: String, before: String, first: Int, last: Int): ConversationConnection!
  createdAt: DateTime!
  email: String!

  """The global ID of the object."""
  id: ID!
  isActive: Boolean!
  isAdmin: Boolean!
  lastSeen: DateTime
  messages(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum!], orderBy: [MessageOrderByWithRelationInput!], skip: Int, take: Int, where: MessageWhereInput): [MessageType!]!
  username: String!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  conversations: ConversationListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  hash: StringFilter
  id: IntFilter
  isAdmin: BoolFilter
  lastRead: LastReadListRelationFilter
  lastSeen: DateTimeNullableFilter
  messages: MessageListRelationFilter
  username: StringFilter
}

input PersonWhereUniqueInput {
  email: String
  id: Int
  username: String
}

type Query {
  conversation(whereId: Int!): ConversationType!
  me: PersonType!

  """Fetches an object given its global ID."""
  node(
    """The global ID of the object."""
    id: ID!
  ): Node

  """Fetches objects given their global IDs."""
  nodes(
    """The global IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
  person(where: PersonWhereUniqueInput!): PersonType!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  newMessages(conversationId: Int!): MessageType!
  personActiveStatus(userId: Int!): Boolean!
}
